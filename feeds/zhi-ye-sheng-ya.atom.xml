<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>January Star</title><link href="chenjiee815/" rel="alternate"></link><link href="chenjiee815/feeds/zhi-ye-sheng-ya.atom.xml" rel="self"></link><id>chenjiee815/</id><updated>2014-09-05T15:33:16+08:00</updated><entry><title>面试官感悟</title><link href="chenjiee815/mian-shi-guan-gan-wu.html" rel="alternate"></link><updated>2014-09-05T15:33:16+08:00</updated><author><name>Chen Jie</name></author><id>tag:chenjiee815,2014-09-05:mian-shi-guan-gan-wu.html</id><summary type="html">
&lt;hr class="docutils"/&gt;
&lt;p&gt; 我从去年下半年开始 , 就陆续参与公司招聘 &lt;cite&gt;Python 工程师 &lt;/cite&gt; 的相关工作 .&lt;/p&gt;
&lt;p&gt; 当然 , 我毕竟不是专业的 HR, 所以更多地是参与技术面试 .&lt;/p&gt;
&lt;p&gt; 以前是被别人面试 , 现在是面试别人 , 所以也算是多了一种视角看待自己的职业生涯 .&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt; 简历 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 简历上的每一个字都很重要 !!!&lt;/p&gt;
&lt;p&gt; 因为面试官在面试之前 , 对面试者的了解仅限于那份简历 , 所以他会细抠简历上每一个字来找出和面试者可交流的点 , 我现在就是这样做的 , 相信其他面试官也是如此 .&lt;/p&gt;
&lt;p&gt; 简历要真实得体现自己的水平 , 因为一旦你在简历上体现出对某种技能很有自信 , 我会抓住这一点不放 , 在正式面试时会刨根问底 .&lt;/p&gt;
&lt;p&gt; 简历看多了 , 我就会注意到有些人会将自己弱点在简历上故意不提及 , 因为这一项是简历应该有的 , 但是你没写 , 我就会有疑问了 .&lt;/p&gt;
&lt;p&gt; 比如 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
有一份简历 , 他的工作经历极简 , 但项目经历一大堆 ,
后来问了才知道 , 跳槽比较频繁 , 怪不得没写 .

所以大家要珍惜自己每次的跳槽机会 , 跳太多的话 ,
面试官看你简历时 , 首先就会觉得你有点浮躁 , 对企业忠诚度不错 .

我的感觉就是 , 这个人招进来做一段时间就走 , 会导致团队不稳定 .
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt; 选择标准 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 说到选择标准 , 这个可能见仁见智了 . 这里我就说一下我在这方面的体会吧 .&lt;/p&gt;
&lt;p&gt; 我面试时就注意考察以下几点 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt; 品行 &lt;/li&gt;
&lt;li&gt; 性格 &lt;/li&gt;
&lt;li&gt; 能力 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt; 品行 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 一个人的品行是一个人的根本所在 .&lt;/p&gt;
&lt;p&gt; 在职业生涯中一个人的品行就体现在 &lt;strong&gt; 职业道德 &lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt; 职业道德的定义我这边就不说了 , 百度 /Google 什么的一大堆 .&lt;/p&gt;
&lt;p&gt; 我就举一个真实的例子 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
前一段时间 , 我们公司收到一份应聘简历 .
对方经验足够 , 能力从简历上的反馈也很不错 , 然后也反馈了一个 github 帐号 ,
我就上面看了一下他的代码 , 刚开始看时还觉得这个人水平不错 ,
但是和他的简历一对比 , 发现一个严重的问题 :

   他的 github 上每个项目都对应都他在之前公司工作的每个项目 ,
   也就是说他 github 上的代码都是他给以前公司写的代码 ,
   然后他还在简历上说明 : 我的个人项目地址 : https://github... ...

看到这个我就倒吸一个凉气 , 有点不敢相信 , 这个也太明显了 ,
我也不清楚对方是怎么想的 , 任何一家仔细看他简历的技术人员都会发现这个问题的 .

这种人完全是 ** 职业道德 ** 的缺失 .
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt; 性格 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 现在的工作 , 基本都不是靠一个人就能够完成的 , 所以很多公司招聘时会特别强调 &lt;strong&gt; 团队合作能力 &lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt; 其实我觉得只要在面试时 , 面试者给人的感觉正常就可以了 ,( 好吧 , 小公司没有大公司有一套心理测试来作分析 , 只能面对面交流 ).&lt;/p&gt;
&lt;p&gt; 比如我遇到的比较不正常的几位 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt; 有一位一直笑 , 还各种笑 , 无论问什么问题都在笑 , 重点是还答非所问 , 光靠笑把问题敷衍过去 .&lt;/li&gt;
&lt;li&gt; 有一位一脸无所谓 , 问啥都漫不经心 .&lt;/li&gt;
&lt;li&gt; 有一位觉得自己很 NB, 感觉自己以前做的东西很高深 , 一般人搞不来 ( 好吧 , 我以前也有过这种心态 ).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt; 能力 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 这个点相信大家都同意吧 , 毕竟每家公司在招聘信息中提及的重点 , 大多还是有关能力的 .&lt;/p&gt;
&lt;p&gt; 其实能力这个点分为两块 :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 已掌握的技术能力 &lt;/li&gt;
&lt;li&gt; 快速学习技术的能力 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 我对应届生以及工作一两年的人着重看第二个能力 , 看他是否有这个潜力 . 考察的点一般有 :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 是否有钻研 / 极客精神 , 爱折腾各类计算机相关的技能 &lt;/li&gt;
&lt;li&gt; 是否在自己学习 / 生活时有用计算机技能解决问题 &lt;/li&gt;
&lt;li&gt; 是否参与开源项目 &lt;/li&gt;
&lt;li&gt; 是否经常参与 &lt;a class="reference external" href="http://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; &lt;a class="reference external" href="http://segmentfault.com/"&gt;SegmentFault&lt;/a&gt; &lt;a class="reference external" href="http://www.zhihu.com/"&gt; 知乎 &lt;/a&gt;  或其它问答网站的问答 .&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 对工作经验丰富的人 , 当然着重看第一个能力了 . 这种人简历上的内容相对也是比较丰富的 , 可问的点很多 , 我一般是直接从简历上入手的 .&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt; 技术题目 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 技术面试 , 面试官少不了会问一些或深或浅的技术题目 .&lt;/p&gt;
&lt;p&gt; 刚开始时 , 我是直接从网上搜索一些常见的技术题目 , 但在实际操作中 , 发现并不理想 .&lt;/p&gt;
&lt;p&gt; 因为那些题目都太偏理论化了 , 所以我就将自己和同事所遇到的一些问题总结出来 , 并分成了高中低三档的技术题目 .&lt;/p&gt;
&lt;p&gt; 我在面试时一般会从低档的题目问 , 看面试者的反应 .&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 对方不屑回答 , 那就跟他解释下 , 我这有三档题目 , 综合考察 .&lt;/li&gt;
&lt;li&gt; 对方答非所问 , 再问 1~2 次 , 如果还是答非所问 , 直接问下一同档题目 .&lt;/li&gt;
&lt;li&gt; 对方答得很流利 , 减少低档的问题数 , 增加中 / 高档的问题数 .&lt;/li&gt;
&lt;li&gt; 对方没答到点子上 , 启发他一下 , 模拟正常和同事交流的场景 .&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 当然 , 这些题目我暂时不会在博客里全部贴出来 , 万一面试者看到了 , 直接就影响我对他的评审结果了 ( 貌似我的博客也没几个人来 ... ...).&lt;/p&gt;
&lt;p&gt; 这些技术题目当然更多的是偏向实战经验了 , 我的想法的是 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
既然我们之前遇到了这些问题 , 那么我现在把问题抛给你 , 你是如何解决的 .
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt; 笔试 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 通常情况下 , 如果我们无法从面试者的 github 项目或者他的其它代码中获取到他的编程水平的 , 我们都会给对方发一份笔试题目 , 让他完成并反馈 .&lt;/p&gt;
&lt;p&gt; 那在接收到他的反馈以后 , 我一般会花上一小段时间来调试他的代码 , 并立即将调试的结果反馈给他 , 希望他能够立即改正 , 并将新版本的代码反馈给我 . 有时候 , 我会故意将我发现的问题分开发送 .&lt;/p&gt;
&lt;p&gt; 比如第一次我反馈下我发现的某一两个问题 , 等着对方反馈 . 对方反馈完了后 , 我再反馈其它的某一两个问题 , 这样重复两三次 , 看看对方的反应如何 .&lt;/p&gt;
&lt;p&gt; 因为我毕竟不是在吹毛求疵 , 而是指出对方代码中实实在在的 BUG, 就看对方的反应了 .&lt;/p&gt;
&lt;p&gt; 其实以上的场景 , 就是真实地模拟正式工作中和同事沟通的场景了 , 所以面试者不要以为笔试只是考的那个题目 , 只要和面试官有任何交流 , 那就是面试 .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt; 结果反馈 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 一般来说 , 面试最终结果的反馈是由 HR 来做的 .&lt;/p&gt;
&lt;p&gt; 但我偶尔也客串一下 ( 好吧 , 你说小公司不正规也行 ).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt; 对于有工作经验的面试者我一般只会发正式的拒绝邮件 .&lt;/li&gt;
&lt;li&gt; 对于应届生 , 如果不是因为技术问题拒绝的 , 一般我会特别附带一下 , 委婉地提及到我们觉得他哪方面能力欠缺的地方 , 希望他能够改正 , 以让他不要在面试其它家公司时不要被同样的原因拒绝 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt; 反思自己 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 好了 , 上面都是讲得面试别人的一些心得与体会 .&lt;/p&gt;
&lt;p&gt;" 俗话 " 说得好 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
力的作用是相互的 .
&lt;/pre&gt;
&lt;p&gt; 我在面试别人的同时 , 也算是别人面试的过程 .&lt;/p&gt;
&lt;p&gt; 我在面试完成之后 , 总结面试者的评审结果时 , 也会对照自己 , 给自己也来一份总结 .&lt;/p&gt;
&lt;p&gt; 比如 :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 面试者有什么缺点 , 我自己有没有 , 能不能改正 , 能改则改之 .&lt;/li&gt;
&lt;li&gt; 面试者有什么优点 , 我有没有 , 能否学习 , 能学则学之 .&lt;/li&gt;
&lt;li&gt; 面试者什么举动什么语言 , 犯到了自己 , 那么自己以后要避免犯到别人 .&lt;/li&gt;
&lt;li&gt; 我有什么举动什么语言犯到了面试者 , 那么自己以后也要注意 .&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="audition"></category><category term="面试"></category><category term="招聘"></category></entry><entry><title>职业生涯瓶颈期之我的经历</title><link href="chenjiee815/zhi-ye-sheng-ya-ping-jing-qi-zhi-wo-de-jing-li.html" rel="alternate"></link><updated>2014-08-28T20:51:34+08:00</updated><author><name>Chen Jie</name></author><id>tag:chenjiee815,2014-08-28:zhi-ye-sheng-ya-ping-jing-qi-zhi-wo-de-jing-li.html</id><summary type="html">
&lt;hr class="docutils"/&gt;
&lt;p&gt; 为了纪念刚刚出离的瓶颈期，我写了这篇博文。
同时也总结这一下这段时间的心态与所得。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt; 引言 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 我目前的职业规划还是做 &lt;strong&gt; 技术 &lt;/strong&gt; 为主。&lt;/p&gt;
&lt;p&gt; 做为一个 &lt;strong&gt; 程序员 &lt;/strong&gt; ，我觉得 &lt;strong&gt; 技术 &lt;/strong&gt; 才是我们的立身之本。只有在技术上掌握到较高的层次，你才好围绕着技术拓展自己的其它能力。&lt;/p&gt;
&lt;p&gt; 当你的技术还没达到较高的层次之前，就相当于在打基础。那这个打基础的过程在我的理解里有点像上台阶。&lt;/p&gt;
&lt;blockquote&gt;
当你走一段比较长的平台，遇到了一个台阶，就是遇到了你的瓶颈。你跨上去了，你就成长了一点，你又会走过一段比较长的平台。但是随后的台阶会越来越高，有人经历了几个台阶后只能原地踏步、有人只经历一两个台阶就另换职业，有人可能会越战越勇，不断得突破自己。&lt;/blockquote&gt;
&lt;p&gt; 那我比较幸运，在我的 IT 职业生涯第二年就遇到了的第一个瓶颈期。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt; 瓶颈期的状态 &lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt; 我是怎样察觉到自己处在瓶颈期的？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 说到怎样察觉，我体会到的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 不是突然遇到一件事就让我察觉到了自己处在瓶颈期。&lt;/p&gt;
&lt;p&gt; 而是在比较长的一段时间内，遇到很多的事情让你有以下几种感觉：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt; 工作没有目标，没有动力，看不到未来 &lt;/li&gt;
&lt;li&gt; 感觉自己活得好累，事业上平平淡淡，生活上没房没车 &lt;/li&gt;
&lt;li&gt; 感觉自己在技术方面很难进步，反而有些退步 &lt;/li&gt;
&lt;li&gt; 感觉自己不明白的东西太多，而自己基础又太薄弱 &lt;/li&gt;
&lt;li&gt;... ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 总之一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt; 感觉自己就是一个 loser&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt; 干啥啥不行，吃啥啥不剩。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt; 我在瓶颈期的状态如何？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 我是从医药行业跨到 IT 行业的。&lt;/p&gt;
&lt;p&gt; 我为什么要来到 IT 行业？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 因为我热爱编程，觉得编程是件很神奇的事。&lt;/p&gt;
&lt;p&gt; 以编程作为自己的职业，是我的梦想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 当初我是怀着一腔热血进入 IT 行业的，冲劲十足，进步神速。只要是和计算机、编程相关的事，我都觉得很有意义，是个学习的机会。&lt;/p&gt;
&lt;p&gt; 但是经过差不多两年的时间，我发现自己很难进步了。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt; 我目前的工作是以 Python 为主，所以就看了大量的目前市面流行的 Python 书籍。但是我发现那些书没啥好看的，基础的我都懂，高深的又比较理论化，感觉投影不到现实编程当中。&lt;/li&gt;
&lt;li&gt; 工作的内容也慢慢 Hold 不住了，以前只用写些小型的界面程序、辅助程序等等。现在面对着复杂的业务逻辑，复杂的业务处理流程，我不知道该怎么这才能比较好的实现了。&lt;/li&gt;
&lt;li&gt; 自己平时都有关注一些新技术、新的 Python 库，新的语言。然后就会花点时间学点皮毛，但总是无法深入。&lt;/li&gt;
&lt;li&gt; 不断接触和涌出的各种技术，让我感觉无所适从，难不成有一个我就学一个？学到死？&lt;/li&gt;
&lt;li&gt; 谈了恋爱，钱、房子、车子等等这些以前想都不想事情，在女朋友有意无意的提示之下，也觉得这些事成了当务之急。而现在自己，却一无所有。&lt;/li&gt;
&lt;li&gt; 看了大量道家的书、佛家的书以及这些圈子的人写的各类文章，让我整个人的理想和实现有了很大的矛盾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 总而言之：&lt;/p&gt;
&lt;blockquote&gt;
整个人生没有了方向，不知道该怎么走，也没有什么动力走下去。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt; 如何渡过瓶颈期 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 当我意识到自己处在一个瓶颈期时，第一个念头就是怎么出离这个令人迷茫而又不舒服状态。&lt;/p&gt;
&lt;p&gt; 我就思考我要怎么做。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt; 什么是我的瓶颈？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 我是一个非科班出身的程序员，基础的知识薄弱。&lt;/p&gt;
&lt;p&gt; 我是一个动态语言为专业的程序员，底层知识薄弱。&lt;/p&gt;
&lt;p&gt; 我只做过一些小型程序、软件，中型以及大型系统的设计及编程能力薄弱。&lt;/p&gt;
&lt;p&gt; 我大部分时间只是在熟悉业务，而对承载业务的各类协议、数据库、操作系统等目前硬通货了解不深入。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt; 如何解决这些瓶颈？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 想要有优质的生活，你需要有好的事业。&lt;/p&gt;
&lt;p&gt; 想要有好的事业，你需要有市场需求的鹤立鸡群的职业技能。&lt;/p&gt;
&lt;p&gt; 想要有过硬的职业技能，你需要能人所不能。&lt;/p&gt;
&lt;p&gt; 想要能人所不能，你需要了解技术的本质，一通百通。&lt;/p&gt;
&lt;p&gt; 在参考了网上一些前辈写的文章，我确定了我以后的两条主线：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt; 先掌握计算的本质、再掌握计算机的本质 &lt;/li&gt;
&lt;li&gt; 掌握目前主要的硬通货 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id20"&gt; 掌握计算的本质 &lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt; 看完《The Little Schemer》、《How to Design Programs》、《structure and interpretation of computer programs》... ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 掌握 Scheme、Haskell、prolog。&lt;/p&gt;
&lt;p&gt; 以实现一门自己的高级语言解释器为一个里程碑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 后面的路暂时还未想到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id21"&gt; 掌握目前主要的硬通货 &lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt; 掌握 HTTP 协议 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 一个 Web 框架的整个实现原理 &lt;/p&gt;
&lt;p&gt; 以编写出一个自己的 Web 框架为里程碑 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 掌握 Python 实现 &lt;/p&gt;
&lt;p&gt; 以实现一个简化版本的 tiny python 为里程碑 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Linux 内核实现 &lt;/p&gt;
&lt;p&gt; 以编写一个自己的小型操作系统里程碑 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt; 我目前的状态 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 我最近一段时间的心理相对于以前来说，平稳了许多。而且很明显得感觉到自己已经开始慢慢摆脱瓶颈期了。&lt;/p&gt;
&lt;p&gt; 怎么感觉到的？&lt;/p&gt;
&lt;blockquote&gt;
很简单。我现在有了方向，有了动力，并且努力朝着这个方向前进。&lt;/blockquote&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt; 我在哪些方面提高了？&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt; 递归 &lt;/p&gt;
&lt;p&gt; 之前的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 印象中的递归更多的是教科书内的汉诺塔之类的例子。&lt;/p&gt;
&lt;p&gt; 递归效率不高，递归层次深了更可能会栈溢出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 现在的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 在看了《The Little Schemer》后，对递归有了更进一步的了解。具体的看 &lt;cite&gt;glob 标准库的学习 &lt;/cite&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 怎样读其他人的代码 &lt;/p&gt;
&lt;p&gt; 之前的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 刚开始学一门语言时，语法不是很熟悉，看别人代码 &lt;/p&gt;
&lt;p&gt; 关注更多的是 &lt;strong&gt; 作者写的是什么 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 看完别人的代码，感觉自己懂了，但是当你脱离作者的代码想自己实现时，还要时不时地看一下原作者的代码 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 现在的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 但是当你熟悉一门语言后，你应该转换你的观点了，&lt;/p&gt;
&lt;p&gt; 应该更多的关注是 &lt;strong&gt; 作者是怎么想的 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 你了解到了作者在写代码时的整个大脑活动，那作者的代码就内化成你自己的代码，同时，由于你本身处于局外人的身份，你还会发现作者的思路缺陷，能够写出更漂亮的代码 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 程序设计基本思想 &lt;/p&gt;
&lt;p&gt; 之前的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 单一职责、自顶向下、模块化、接口先行、自底向上 ... ...&lt;/p&gt;
&lt;p&gt; 只知道这些名词是啥意思，但是在代码设计及实现却没有有意识的按照这些思想去做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 现在的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 自顶向下体现的是一种全局观，根据需求划分出多个功能模块、然后每个功能模块需要提供哪些接口 &lt;/p&gt;
&lt;p&gt; 然后再自底向上挨个实现每个功能模块，当然在每个功能模块内部也同样可以复用以上逻辑 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt; 设计模式 &lt;/p&gt;
&lt;p&gt; 之前的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 以前有过一段做 GUI 程序的经历，在做 GUI 时，我觉得 GUI 这个领域算是面向对象的最佳实践之一。当时也是首次有意识地将设计模式应用到代码中。当然，一开始必然是生搬硬套。对着书，觉得这个设计模式有意思，好，看看程序里哪边可以使用上。&lt;/p&gt;
&lt;p&gt; 后来，又接触到了函数式编程的概念。网上很多文章将函数式编程和面向对象编程放在了对立面，然后将函数式编程捧得很高，将面向对象编程批得很挫。我也受到这种思想的荼毒，走得比较极端，开始厌恶使用面向对象编程，甚至拒绝使用 Python 中的 class 关键字定义类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 现在的理解 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 设计模式最重要的是什么？&lt;/p&gt;
&lt;p&gt; 设计模式最重要的是它的 SOLID 原则。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 单一职责原则：The Single Presponsibility Principle&lt;/p&gt;
&lt;p&gt; 开放封闭原则：The Open Closed Principle&lt;/p&gt;
&lt;p&gt; 里氏替换原则：The Liskov Substitution Principle&lt;/p&gt;
&lt;p&gt; 接口分离原则：The Interface Segregation Principle&lt;/p&gt;
&lt;p&gt; 依赖倒置原则：The Dependency Inversion Principle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 那些所谓的设计模式只是在一定的应该场景中这些原则的全部或者部分的映射。&lt;/p&gt;
&lt;p&gt;class 定义一个类是提供了一种封装的手段，那么闭包也是。它们都是为了实现封装而提供的工具而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="career"></category><category term="职业"></category></entry></feed>